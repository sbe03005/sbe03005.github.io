I"|<blockquote>
  <p>프로젝션이란 SELECT절에 조회 대상을 지정하는 것이다. 프로젝션의 대상은 가장 기본적으로 엔티티 타입, 스칼라 타입(원하는 값만 뽑고 싶을 때), 드물지만 임베디드 타입이 있다.</p>
</blockquote>

<p><br /></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">m</span> <span class="k">FROM</span> <span class="n">Member</span> <span class="n">m</span> <span class="o">//</span> <span class="err">엔티티</span> <span class="err">프로젝션</span>
<span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="n">team</span> <span class="k">FROM</span> <span class="n">Member</span> <span class="n">m</span> <span class="o">//</span> <span class="err">엔티티</span> <span class="err">프로젝션</span>
<span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="n">address</span> <span class="k">FROM</span> <span class="n">Member</span> <span class="n">m</span> <span class="o">//</span> <span class="err">임베디드</span> <span class="err">타입</span> <span class="err">프로젝션</span>
<span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">age</span> <span class="k">FROM</span> <span class="n">Member</span> <span class="n">m</span> <span class="o">//</span> <span class="err">스칼라</span> <span class="err">타입</span> <span class="err">프로젝션</span>
</code></pre></div></div>

<p>엔티티 프로젝션은 엔티티 전체를 조회하는 것이다.</p>

<p>임베디드 타입은 임베디드 타입으로 된 값을 조회하는 것인데, 임베디드 타입은 다른 엔티티에 소속되어 있기 때문에 당연히 From절에서 나오지 않는다.</p>

<p>스칼라 타입은 위의 코드와 같이 <strong>원하는 값만 뽑아오는 것</strong>을 말한다.</p>

<h2 id="스칼라-타입-프로젝션---여러-값-조회">스칼라 타입 프로젝션 - 여러 값 조회</h2>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">age</span> <span class="k">FROM</span> <span class="n">Member</span> <span class="n">m</span> <span class="o">//</span> <span class="err">스칼라</span> <span class="err">타입</span> <span class="err">프로젝션</span>
</code></pre></div></div>

<p>Member 엔티티의 username과 age를 각각 뽑아오기 위해서는 크게 3가지 방법이 있다.</p>

<h3 id="1-query-type">1. Query Type</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span> <span class="n">resultList</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select distinct m.username, m.age from Member m"</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>
<span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">resultList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="nc">Object</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Object</span><span class="o">[])</span> <span class="n">o</span><span class="o">;</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"result[0] = "</span> <span class="o">+</span> <span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"result[0] = "</span> <span class="o">+</span> <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</code></pre></div></div>

<p>리스트를 받아오는데 어떤 타입인지 명시하지 않고 쿼리 타입으로 받아오는 방법이다. 엔티티나 타입을 지정하지 않았기 때문에 Object로 받아서 거기서 다시 Object배열로 뽑아와야한다.</p>

<p><strong>비효율적</strong>.</p>

<h3 id="2-object-type">2. Object[] Type</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="n">resultList2</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select distinct m.username, m.age from Member m"</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"result[0] = "</span> <span class="o">+</span> <span class="n">resultList2</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)[</span><span class="mi">0</span><span class="o">]);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"result[0] = "</span> <span class="o">+</span> <span class="n">resultList2</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)[</span><span class="mi">1</span><span class="o">]);</span>
</code></pre></div></div>

<p>위의 방법에서 조금 간소화한 방법이다.</p>

<h3 id="3-new-명령어로-조회">3. new 명령어로 조회</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberDTO</span><span class="o">&gt;</span> <span class="n">resultList1</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select  new jpql.MemberDTO(m.username, m.age) from Member m"</span><span class="o">,</span> 	 
                              <span class="nc">MemberDTO</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                              <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>

<span class="nc">MemberDTO</span> <span class="n">memberDTO</span> <span class="o">=</span> <span class="n">resultList1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"memberDTO.toString() = "</span> <span class="o">+</span> <span class="n">memberDTO</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</code></pre></div></div>

<p>DTO를 따로 만들어서 불러올 수 있다. 근데 String이라 해당 <strong>DTO의 경로명을 모두 적어야한다</strong>. 또한 DTO클래스의 <strong>순서와 타입이 일치하는 생성자</strong>가 필요하다.</p>

:ET